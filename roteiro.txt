Roteiro Full Stack â€“ Projeto CRUD de Alunos
ðŸ”¹ Backend (Node.js + Express + MySQL)

Criar projeto Node.js e instalar dependÃªncias (express, mysql2, cors).

Configurar servidor Express.

Criar conexÃ£o com banco de dados MySQL.

Criar tabela alunos no banco com os campos: id, nome, email, idade, turma.

Implementar Model para acessar o banco (funÃ§Ãµes para listar, inserir, atualizar, deletar).

Implementar Rotas:

GET /api/alunos â†’ lista todos os alunos

POST /api/alunos â†’ cria um novo aluno

PUT /api/alunos/:id â†’ atualiza um aluno

DELETE /api/alunos/:id â†’ deleta um aluno

Testar a API no Insomnia/Postman.

Habilitar CORS para permitir acesso do frontend.

ðŸ”¹ Frontend (HTML + CSS + JS)

Criar pÃ¡gina index.html com:

Um formulÃ¡rio para cadastrar aluno (nome, email, idade, turma).

Uma lista (ul/div/tabela) para exibir alunos.

Criar arquivo script.js para:

Carregar lista de alunos ao abrir a pÃ¡gina (fetch GET).

Cadastrar novo aluno enviando os dados do formulÃ¡rio (fetch POST).

Exibir alunos na lista/tabela.

Adicionar botÃµes de Editar e Excluir em cada aluno exibido.

Excluir: chamar fetch DELETE e atualizar a lista.

Editar: preencher o formulÃ¡rio com os dados do aluno, chamar fetch PUT e atualizar a lista.

Criar style.css bÃ¡sico para organizar formulÃ¡rio e lista.

ðŸ”¹ IntegraÃ§Ã£o (Full Stack)

Rodar backend na porta 3000.

Rodar frontend (Live Server ou abrir o index.html).

Garantir que as requisiÃ§Ãµes fetch do frontend estÃ£o chamando a API (http://localhost:3000/api/alunos).

Testar todo o fluxo:

Inserir aluno â†’ aparece na lista.

Atualizar aluno â†’ aparece atualizado.

Deletar aluno â†’ some da lista.

ðŸ”¹ Melhorias Futuras

Implementar validaÃ§Ãµes no backend (ex: nÃ£o aceitar email duplicado).

Exibir mensagens de erro/sucesso no frontend.

Paginar a lista de alunos.

Criar login/autenticaÃ§Ã£o com JWT.

Migrar frontend para React ou Vue.

Hospedar backend (Render/Railway) e frontend (Vercel/Netlify).